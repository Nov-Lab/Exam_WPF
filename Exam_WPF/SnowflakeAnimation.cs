// @(h)SnowflakeAnimation.cs ver 0.00 ( '24.06.22 Nov-Lab ) 作成開始
// @(h)SnowflakeAnimation.cs ver 0.51 ( '24.06.22 Nov-Lab ) ベータ版完成
// @(h)SnowflakeAnimation.cs ver 0.51a( '24.06.26 Nov-Lab ) その他  ：コメント整理

// @(s)
// 　【雪片アニメーション】雪片１つのアニメーション動作を管理する機能を提供します。

using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Text;


// 名前空間以外は Windows フォーム版と同じです。
namespace Exam_WPF
{
    //====================================================================================================
    /// <summary>
    /// 【雪片アニメーション】雪片１つのアニメーション動作を管理する機能を提供します。
    /// </summary>
    /// <remarks>
    /// 補足<br/>
    /// ・アニメーション動作は 1フレーム = 16ミリ秒(約1/60秒)で設計しています。<br/>
    /// </remarks>
    //====================================================================================================
    public partial class SnowflakeAnimation
    {
        //====================================================================================================
        // static 内部フィールド
        //====================================================================================================

        // ＜メモ＞
        // ・すべてのインスタンスで１つの擬似乱数ジェネレーターを共有する。
        /// <summary>
        /// 【擬似乱数ジェネレーター】
        /// </summary>
        protected readonly static Random m_random = new Random();


        //====================================================================================================
        // 公開フィールド(フレームごとに変化する現在値)
        //====================================================================================================

        /// <summary>
        /// 【X位置(描画範囲の横幅に対するパーセント値)】
        /// </summary>
        public float xPos;

        /// <summary>
        /// 【Y位置(描画範囲の高さに対するパーセント値)】
        /// </summary>
        public float yPos;

        /// <summary>
        /// 【角度値】
        /// </summary>
        public float degree;


        //====================================================================================================
        // 公開フィールド(動作設定値)
        //====================================================================================================

        /// <summary>
        /// 【直径(ピクセル数)】
        /// </summary>
        public float diameter;

        /// <summary>
        /// 【X位置基準値(描画範囲の横幅に対するパーセント値)】この位置を中心として左右に揺れ動きます。
        /// </summary>
        public float xBase;

        /// <summary>
        /// 【Y位置加算量(描画範囲の高さに対するパーセント値)】1フレームごとのY位置の加算量。降下速度
        /// </summary>
        public float yPosIncrement;

        /// <summary>
        /// 【角度値加算量】1フレームごとの角度値の加算量。揺れ速度
        /// </summary>
        public float degreeIncrement;

        /// <summary>
        /// 【X振り幅】横揺れの振り幅をY位置加算量に対する倍率(1.0 = 等倍)で表します。
        /// この値が同じ場合、ゆっくり降下するときほど振り幅は小さく、速く降下するときほど振り幅は大きくなります。
        /// </summary>
        public float shakeWidth;


        //====================================================================================================
        // コンストラクター
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【コンストラクター】既定の内容で雪片アニメーションの新しいインスタンスを生成します。
        /// </summary>
        //--------------------------------------------------------------------------------
        public SnowflakeAnimation()
        {
            //------------------------------------------------------------
            /// 新しいインスタンスを生成する
            //------------------------------------------------------------
            Initialize();                                               //// 動作設定値初期化処理を行う
            yPos = M_GetRandom(0, 95);                                  //// Y位置を 0%～95% の範囲のランダムな値に初期化する
        }


        //====================================================================================================
        // アニメーション動作関連
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【動作設定値初期化】動作設定値をランダムな値に初期化します。
        /// </summary>
        //--------------------------------------------------------------------------------
        protected void Initialize()
        {
            //------------------------------------------------------------
            /// 動作設定値をランダムな値に初期化する
            //------------------------------------------------------------
            diameter = m_random.Next(3, 8);                             //// 直径
            xBase = M_GetRandom(0, 100);                                //// X位置基準値
            yPosIncrement = M_GetRandom(0.5f, 2.0f);                    //// Y位置加算量
            shakeWidth = M_GetRandom(0.3f, 2.0f);                       //// X振り幅
            degree = M_GetRandom(0, 360);                               //// 角度値
            degreeIncrement = M_GetRandom(2.0f, 5.0f);                  //// 角度値加算量
        }


        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【アニメーション動作】1フレーム分、雪片をアニメーションさせます。
        /// </summary>
        //--------------------------------------------------------------------------------
        public void MoveAnimation()
        {
            //------------------------------------------------------------
            /// 1フレーム分、雪片をアニメーションさせる
            //------------------------------------------------------------
            if (yPos > 110)
            {                                                           //// Y位置 > 110 の場合(前回の動作で完全に描画範囲外に出た場合)
                yPos = M_GetRandom(-5, 0);                              /////  Y位置をリセットする(-5%～0%)
                Initialize();                                           /////  動作設定値を再初期化する(再出現のたびに異なる動作とする)
            }

            yPos += yPosIncrement;                                      //// 1フレーム分、Y位置を加算する
            degree += degreeIncrement;                                  //// 1フレーム分、角度値を加算する
            degree %= 360;                                              //// 角度値を0以上360未満に正規化する

            xPos = xBase +                                              //// X位置を算出する
                (float)(yPosIncrement * shakeWidth * Math.Sin(degree * Math.PI / 180));
        }


        //====================================================================================================
        // 内部メソッド
        //====================================================================================================

        //--------------------------------------------------------------------------------
        /// <summary>
        /// 【乱数値取得】<paramref name="minValue"/>以上、<paramref name="maxValue"/>未満の範囲内で乱数値を生成します。
        /// </summary>
        /// <param name="minValue">[in ]：最小値</param>
        /// <param name="maxValue">[in ]：最大値</param>
        /// <returns>
        /// 生成した乱数値
        /// </returns>
        //--------------------------------------------------------------------------------
        protected float M_GetRandom(float minValue, float maxValue)
        {
            //------------------------------------------------------------
            /// 指定された範囲内で乱数値を生成する
            //------------------------------------------------------------
            var range = maxValue - minValue;
            return (float)(minValue + m_random.NextDouble() * range);
        }

    } // class

} // namespace
